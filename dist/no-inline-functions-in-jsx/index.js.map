{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/no-inline-functions-in-jsx/index.ts"],"names":[],"mappings":";;AAIA,MAAM,MAAM,GAAoC;IAC9C,cAAc,EAAE,EAAE;IAClB,IAAI,EAAE;QACJ,IAAI,EAAE,YAAY;QAClB,QAAQ,EAAE;YACN,KAAK,EAAE,4FAA4F;SACtG;QACD,IAAI,EAAE;YACF,WAAW,EAAE,sTAAsT;YACnU,WAAW,EAAE,MAAM;YACnB,GAAG,EAAE,iHAAiH;SACzH;QACD,MAAM,EAAE,EAAE,EAAE,aAAa;KAC1B;IACD,MAAM,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;QAClB,uBAAuB,EAAE,IAAI,CAAC,EAAE;;YAC5B,IAAI,CAAA,MAAA,MAAA,IAAI,CAAC,MAAM,0CAAE,MAAM,0CAAE,IAAI,MAAK,cAAc,EAAE;gBAC9C,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAA;gBAClC,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAA;gBACjC,qCAAqC;gBACrC,MAAM,UAAU,GAAG,MAAA,MAAC,OAAe,CAAC,MAAM,0CAAE,IAAI,0CAAE,IAAI,CAAA;gBAEtD,OAAO,CAAC,MAAM,CAAC;oBACX,IAAI;oBACJ,SAAS,EAAE,OAAO;oBAClB,IAAI,EAAE;wBACF,OAAO;wBACP,UAAU;qBACb;iBACJ,CAAC,CAAA;aACL;QACL,CAAC;KACF,CAAC;CACH,CAAA;AAED,kBAAe,MAAM,CAAA","sourcesContent":["import { TSESLint } from '@typescript-eslint/utils'\n\ntype MessageIds = 'noJSX'\n\nconst myRule: TSESLint.RuleModule<MessageIds> = {\n  defaultOptions: [],\n  meta: {\n    type: 'suggestion',\n    messages: {\n        noJSX: 'No inline functions. Please move the function {{ jsxName }} in {{ jsxElement }} to a store'\n    },\n    docs: {\n        description: \"Since functions are objects in JavaScript ({} !== {}), the inline function will always fail the prop diff when React does a diff check. Also, an arrow function will create a new instance of the function on each render if it's used in a JSX property. This might create a lot of work for the garbage collector.\",\n        recommended: 'warn',\n        url: 'https://stackoverflow.com/questions/36677733/why-shouldnt-jsx-props-use-arrow-functions-or-bind#answer-36677798'\n    },\n    schema: [], // no options\n  },\n  create: context => ({\n    ArrowFunctionExpression: node => {\n        if (node.parent?.parent?.type === 'JSXAttribute') {\n            const element = node.parent.parent\n            const jsxName = element.name.name\n            // parent does have the name property\n            const jsxElement = (element as any).parent?.name?.name\n\n            context.report({\n                node,\n                messageId: \"noJSX\",\n                data: {\n                    jsxName,\n                    jsxElement\n                },\n            })\n        }\n    }\n  }),\n}\n\nexport default myRule\n"]}