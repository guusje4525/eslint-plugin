{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/sp-assignment/index.ts"],"names":[],"mappings":";;;;;AACA,qDAA4B;AAI5B,MAAM,MAAM,GAAoC;IAC5C,cAAc,EAAE,EAAE;IAClB,IAAI,EAAE;QACF,IAAI,EAAE,SAAS;QACf,IAAI,EAAE;YACF,WAAW,EAAE,yGAAyG;YACtH,WAAW,EAAE,KAAK;SACrB;QACD,MAAM,EAAE,EAAE;QACV,QAAQ,EAAE;YACN,4BAA4B,EAAE,wDAAwD;YACtF,mBAAmB,EAAE,iEAAiE;SACzF;KACJ;IACD,MAAM,CAAC,OAAO;QACV,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,EAAE,CAAA;QAEtC,mDAAmD;QACnD,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE;YAC7B,OAAO,EAAE,CAAA;SACZ;QAED,OAAO;YACH,gBAAgB,CAAC,IAAS;;gBACtB,0BAA0B;gBAC1B,IAAI,IAAI,CAAC,IAAI,KAAK,aAAa;oBAAE,OAAM;gBAEvC,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAA;gBAEhC,wDAAwD;gBACxD,IAAI,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI;oBAAE,OAAM;gBAErE,qIAAqI;gBAErI,KAAK,MAAM,CAAC,IAAI,MAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,KAAK,0CAAE,IAAI,0CAAE,IAAI,EAAE;oBACrC,6DAA6D;oBAC7D,IAAI,eAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC,IAAI,eAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE;wBACpE,SAAQ;qBACX;oBAED,yEAAyE;oBACzE,IAAI,eAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC,EAAE;wBAC3B,OAAM;qBACT;oBAED,oEAAoE;oBACpE,OAAO,OAAO,CAAC,MAAM,CAAC;wBAClB,IAAI,EAAE,CAAC;wBACP,SAAS,EAAE,8BAA8B;qBAC5C,CAAC,CAAA;iBACL;gBAED,gFAAgF;gBAChF,OAAO,CAAC,MAAM,CAAC;oBACX,IAAI,EAAE,IAAI,CAAC,KAAK;oBAChB,SAAS,EAAE,qBAAqB;iBACnC,CAAC,CAAA;YACN,CAAC;SACJ,CAAA;IACL,CAAC;CACJ,CAAA;AAED,kBAAe,MAAM,CAAA","sourcesContent":["import { TSESLint } from '@typescript-eslint/utils'\nimport Utils from '../utils'\n\ntype MessageIds = 'statementsBeforeSpAssignment' | 'missingSpAssignment'\n\nconst myRule: TSESLint.RuleModule<MessageIds> = {\n    defaultOptions: [],\n    meta: {\n        type: 'problem',\n        docs: {\n            description: \"Ensure that in files containing 'store', constructors in classes have 'this.sp = sp' as the first line.\",\n            recommended: false\n        },\n        schema: [],\n        messages: {\n            statementsBeforeSpAssignment: 'Detected statements before the this.sp = sp assignment',\n            missingSpAssignment: \"The constructor should contain be 'this.sp = sp' if sp is given\"\n        }\n    },\n    create(context) {\n        const fileName = context.getFilename()\n\n        // Only process files that have \"Store\" in the name\n        if (!fileName.includes(\"Store\")) {\n            return {}\n        }\n\n        return {\n            MethodDefinition(node: any) {\n                // Only check constructors\n                if (node.kind !== \"constructor\") return\n\n                const params = node.value.params\n\n                // Ensure that the constructor has a paramater called sp\n                if (!params || params.length === 0 || params[0].name !== 'sp') return\n\n                // Go through each line, as we allow sp.something = '' and makeAutoObservable() statements before the initial this.sp = sp assignment\n\n                for (const n of node?.value?.body?.body) {\n                    // These are allowed to be before the this.sp = sp assignment\n                    if (Utils.lineIsMakeAutoObserable(n) || Utils.lineMakesSpAssignment(n)) {\n                        continue\n                    }\n\n                    // If we find the this.sp = sp line, then there is no point in continuing\n                    if (Utils.lineIsThisSpIsSp(n)) {\n                        return\n                    }\n\n                    // Detected an unexpected statement before we have set this.sp to sp\n                    return context.report({\n                        node: n,\n                        messageId: \"statementsBeforeSpAssignment\",\n                    })\n                }\n\n                // We didnt detect this.sp = sp, even though we did submit sp in the constructor\n                context.report({\n                    node: node.value,\n                    messageId: \"missingSpAssignment\",\n                })\n            }\n        }\n    }\n}\n\nexport default myRule\n"]}