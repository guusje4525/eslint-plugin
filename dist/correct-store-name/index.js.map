{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/correct-store-name/index.ts"],"names":[],"mappings":";;AAIA,MAAM,MAAM,GAAoC;IAC9C,cAAc,EAAE,EAAE;IAClB,IAAI,EAAE;QACJ,IAAI,EAAE,YAAY;QAClB,QAAQ,EAAE;YACN,mBAAmB,EAAE,qDAAqD;SAC7E;QACD,IAAI,EAAE;YACF,WAAW,EAAE,gEAAgE;YAC7E,WAAW,EAAE,MAAM;SACtB;QACD,OAAO,EAAE,MAAM;QACf,cAAc,EAAE,IAAI;QACpB,MAAM,EAAE,EAAE;KACX;IACD,MAAM,EAAE,CAAC,OAAY,EAAE,EAAE,CAAC,CAAC;QACzB,UAAU,EAAE,CAAC,IAAS,EAAE,EAAE;;YACtB,MAAM;YACN,+BAA+B;YAC/B,+CAA+C;YAC/C,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,KAAI,MAAA,MAAA,MAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,0CAAE,EAAE,0CAAE,MAAM,0CAAE,IAAI,0CAAE,MAAM,CAAA,EAAE;gBACjE,6DAA6D;gBAC7D,MAAM,MAAM,GAAG,MAAA,MAAA,MAAA,MAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,0CAAE,EAAE,0CAAE,MAAM,0CAAE,IAAI,0CAAE,MAAM,0CAAE,IAAI,CAAA;gBAC3D,IAAI,YAAY,GAAQ,EAAE,CAAA;gBAC1B,qCAAqC;gBACrC,IAAI,MAAM,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;oBACtC,IAAI,MAAM,KAAK,UAAU,EAAE;wBACvB,YAAY,GAAG,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,0CAAE,EAAE,0CAAE,MAAM,0CAAE,IAAI,0CAAE,MAAM,0CAAE,MAAM,0CAAE,SAAS,CAAC,CAAC,CAAC,0CAAE,IAAI,0CAAE,MAAM,0CAAE,IAAI,CAAA;wBACnG,2DAA2D;qBAC1D;yBAAM,IAAI,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;wBACjC,aAAa;wBACb,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;qBACxC;oBAED,IAAI,YAAY,IAAI,YAAY,KAAK,EAAE,EAAE;wBACrC,qCAAqC;wBACrC,YAAY,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;wBAExE,2BAA2B;wBAC3B,OAAO,CAAC,MAAM,CAAC;4BACX,IAAI,EAAE,IAAI;4BACV,SAAS,EAAE,qBAAqB;4BAChC,IAAI,EAAE;gCACF,gBAAgB,EAAE,YAAY;6BACjC;4BACD,OAAO,EAAE;gCACL;oCACI,IAAI,EAAE,aAAa,YAAY,EAAE;oCACjC,GAAG,EAAE,UAAU,KAAU;wCACrB,OAAO,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;oCACjD,CAAC;iCACJ;6BACJ;yBACJ,CAAC,CAAC;qBACN;iBACJ;aACJ;QACL,CAAC;KACF,CAAC;CACH,CAAA;AAED,kBAAe,MAAM,CAAA","sourcesContent":["import { TSESLint } from '@typescript-eslint/utils'\n\ntype MessageIds = 'useCorrectStoreName'\n\nconst myRule: TSESLint.RuleModule<MessageIds> = {\n  defaultOptions: [],\n  meta: {\n    type: 'suggestion',\n    messages: {\n        useCorrectStoreName: \"Don't use store, use {{ correctStoreName }} instead\",\n    },\n    docs: {\n        description: \"Properly named stores are a lot easier to identify & work with\",\n        recommended: 'warn',\n    },\n    fixable: 'code',\n    hasSuggestions: true,\n    schema: [],\n  },\n  create: (context: any) => ({\n    Identifier: (node: any) => {\n        // ex.\n        // const store = useAuthStore()\n        // Triggers when a const variable name is store\n        if (node.name === 'store' && node?.parent?.id?.parent?.init?.callee) {\n            // Get the name of the value we are trying to assign to store\n            const callee = node?.parent?.id?.parent?.init?.callee?.name\n            let newStoreName: any = ''\n            // If we are initializing a new store\n            if (callee && typeof callee === 'string') {\n                if (callee === 'useStore') {\n                    newStoreName = node?.parent?.id?.parent?.init?.callee?.parent?.arguments[0]?.body?.callee?.name\n                // Is it starts with use (ex. useAuthStore starts with use)\n                } else if (callee.startsWith('use')) {\n                    // Remove use\n                    newStoreName = callee.split('use')[1]\n                }\n                \n                if (newStoreName && newStoreName !== '') {   \n                    // First caracter should be lowercase\n                    newStoreName = newStoreName[0].toLowerCase() + newStoreName.substring(1)\n    \n                    // Report and suggest a fix\n                    context.report({\n                        node: node,\n                        messageId: 'useCorrectStoreName',\n                        data: {\n                            correctStoreName: newStoreName,\n                        },\n                        suggest: [\n                            {\n                                desc: `Change to ${newStoreName}`,\n                                fix: function (fixer: any) {\n                                    return fixer.replaceText(node, newStoreName);\n                                }\n                            },\n                        ]\n                    });\n                }\n            }\n        }\n    }\n  }),\n}\n\nexport default myRule\n"]}