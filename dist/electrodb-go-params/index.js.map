{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/electrodb-go-params/index.ts"],"names":[],"mappings":";;AAIA,MAAM,MAAM,GAAoC;IAC9C,cAAc,EAAE,EAAE;IAClB,IAAI,EAAE;QACJ,IAAI,EAAE,YAAY;QAClB,QAAQ,EAAE;YACN,uBAAuB,EAAE,uHAAuH;SACnJ;QACD,MAAM,EAAE,EAAE;KACX;IACD,MAAM,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC;QAClB,gBAAgB,EAAE,CAAC,IAAS,EAAE,EAAE;;YAC5B,IAAI,CAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,QAAQ,0CAAE,IAAI,KAAI,IAAI,EAAE;gBAC9B,MAAM,WAAW,GAAG,MAAA,MAAA,MAAA,IAAI,CAAC,QAAQ,0CAAE,MAAM,CAAC,MAAM,0CAAE,MAAM,0CAAE,MAAM,CAAA;gBAEhE,IAAI,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,IAAI,MAAK,kBAAkB,IAAI,CAAA,MAAA,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM,0CAAE,MAAM,0CAAE,IAAI,MAAK,kBAAkB,EAAE;oBACtG,MAAM,KAAK,GAAG,CAAA,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,0CAAE,IAAI,MAAI,MAAA,MAAA,MAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM,0CAAE,MAAM,0CAAE,QAAQ,0CAAE,IAAI,CAAA,CAAA;oBACxF,IAAI,KAAK,KAAK,OAAO,EAAE;wBACnB,MAAM,gBAAgB,GAAG,CAAC,CAAA,MAAA,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,0CAAE,UAAU,KAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,OAAO,CAAC,CAAA;wBAC9G,IAAI,CAAC,gBAAgB,EAAE;4BACnB,OAAO,CAAC,MAAM,CAAC;gCACX,IAAI;gCACJ,SAAS,EAAE,yBAAyB;6BACvC,CAAC,CAAC;yBACN;qBACJ;iBACJ;aACJ;QACL,CAAC;KACF,CAAC;CACH,CAAA;AAED,kBAAe,MAAM,CAAA","sourcesContent":["import { TSESLint } from '@typescript-eslint/utils'\n\ntype MessageIds = 'goMethodShouldHavePages'\n\nconst myRule: TSESLint.RuleModule<MessageIds> = {\n  defaultOptions: [],\n  meta: {\n    type: 'suggestion',\n    messages: {\n        goMethodShouldHavePages: \"Please ensure that every .go() query from electroDB has atleast pages: 'all'. Also consider using limit if applicable\",\n    },\n    schema: [],\n  },\n  create: context => ({\n    MemberExpression: (node: any) => {\n        if (node?.property?.name == 'go') {\n            const firstParent = node.property?.parent.object?.callee?.object\n    \n            if (firstParent?.type === 'MemberExpression' || firstParent?.callee?.object?.type === 'MemberExpression') {\n                const query = firstParent?.property?.name || firstParent?.callee?.object?.property?.name\n                if (query === 'query') {\n                    const hasPagesAndLimit = (node.parent.arguments[0]?.properties || []).some((x: any) => x.key.name === 'pages')\n                    if (!hasPagesAndLimit) {\n                        context.report({\n                            node,\n                            messageId: \"goMethodShouldHavePages\",\n                        });\n                    }\n                }\n            }\n        }\n    }\n  }),\n}\n\nexport default myRule\n"]}