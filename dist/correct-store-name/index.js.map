{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/correct-store-name/index.ts"],"names":[],"mappings":";;AAIA,MAAM,MAAM,GAAoC;IAC9C,cAAc,EAAE,EAAE;IAClB,IAAI,EAAE;QACJ,IAAI,EAAE,YAAY;QAClB,QAAQ,EAAE;YACN,mBAAmB,EAAE,qDAAqD;SAC7E;QACD,IAAI,EAAE;YACF,WAAW,EAAE,gEAAgE;YAC7E,WAAW,EAAE,MAAM;SACtB;QACD,OAAO,EAAE,MAAM;QACf,cAAc,EAAE,IAAI;QACpB,MAAM,EAAE,EAAE;KACX;IACD,MAAM,EAAE,CAAC,OAAY,EAAE,EAAE,CAAC,CAAC;QACzB,UAAU,EAAE,CAAC,IAAS,EAAE,EAAE;;YACtB,MAAM;YACN,+BAA+B;YAC/B,+CAA+C;YAC/C,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,EAAE;gBACvB,6DAA6D;gBAC7D,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAA;gBACrD,IAAI,YAAY,GAAQ,EAAE,CAAA;gBAC1B,qCAAqC;gBACrC,IAAI,MAAM,KAAK,UAAU,EAAE;oBACvB,YAAY,GAAG,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,MAAA,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,MAAM,0CAAE,EAAE,0CAAE,MAAM,0CAAE,IAAI,0CAAE,MAAM,0CAAE,MAAM,0CAAE,SAAS,CAAC,CAAC,CAAC,0CAAE,IAAI,0CAAE,MAAM,0CAAE,IAAI,CAAA;oBACnG,2DAA2D;iBAC1D;qBAAM,IAAI,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;oBACjC,aAAa;oBACb,YAAY,GAAG,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAA;iBACxC;gBAED,IAAI,YAAY,IAAI,YAAY,KAAK,EAAE,EAAE;oBACrC,qCAAqC;oBACrC,YAAY,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAA;oBAExE,2BAA2B;oBAC3B,OAAO,CAAC,MAAM,CAAC;wBACX,IAAI,EAAE,IAAI;wBACV,SAAS,EAAE,qBAAqB;wBAChC,IAAI,EAAE;4BACF,gBAAgB,EAAE,YAAY;yBACjC;wBACD,OAAO,EAAE;4BACL;gCACI,IAAI,EAAE,aAAa,YAAY,EAAE;gCACjC,GAAG,EAAE,UAAU,KAAU;oCACrB,OAAO,KAAK,CAAC,WAAW,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;gCACjD,CAAC;6BACJ;yBACJ;qBACJ,CAAC,CAAC;iBACN;aACJ;QACL,CAAC;KACF,CAAC;CACH,CAAA;AAED,kBAAe,MAAM,CAAA","sourcesContent":["import { TSESLint } from '@typescript-eslint/utils'\n\ntype MessageIds = 'useCorrectStoreName'\n\nconst myRule: TSESLint.RuleModule<MessageIds> = {\n  defaultOptions: [],\n  meta: {\n    type: 'suggestion',\n    messages: {\n        useCorrectStoreName: \"Don't use store, use {{ correctStoreName }} instead\",\n    },\n    docs: {\n        description: \"Properly named stores are a lot easier to identify & work with\",\n        recommended: 'warn',\n    },\n    fixable: 'code',\n    hasSuggestions: true,\n    schema: [],\n  },\n  create: (context: any) => ({\n    Identifier: (node: any) => {\n        // ex.\n        // const store = useAuthStore()\n        // Triggers when a const variable name is store\n        if (node.name === 'store') {\n            // Get the name of the value we are trying to assign to store\n            const callee = node.parent.id.parent.init.callee.name\n            let newStoreName: any = ''\n            // If we are initializing a new store\n            if (callee === 'useStore') {\n                newStoreName = node?.parent?.id?.parent?.init?.callee?.parent?.arguments[0]?.body?.callee?.name\n            // Is it starts with use (ex. useAuthStore starts with use)\n            } else if (callee.startsWith('use')) {\n                // Remove use\n                newStoreName = callee.split('use')[1]\n            }\n            \n            if (newStoreName && newStoreName !== '') {   \n                // First caracter should be lowercase\n                newStoreName = newStoreName[0].toLowerCase() + newStoreName.substring(1)\n\n                // Report and suggest a fix\n                context.report({\n                    node: node,\n                    messageId: 'useCorrectStoreName',\n                    data: {\n                        correctStoreName: newStoreName,\n                    },\n                    suggest: [\n                        {\n                            desc: `Change to ${newStoreName}`,\n                            fix: function (fixer: any) {\n                                return fixer.replaceText(node, newStoreName);\n                            }\n                        },\n                    ]\n                });\n            }\n        }\n    }\n  }),\n}\n\nexport default myRule\n"]}